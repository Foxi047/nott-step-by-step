import React, { useState, useEffect } from 'react';
import Sidebar from '../components/Sidebar';
import MainArea from '../components/MainArea';
import Settings from '../components/Settings';
import SavedProjects from '../components/SavedProjects';
import PreviewMode from '../components/PreviewMode';
import ImageEditor from '../components/ImageEditor';
import HtmlTemplateSelector from '../components/HtmlTemplateSelector';

import FileEditor from '../components/FileEditor';
import SaveOptionsDialog from '../components/SaveOptionsDialog';
import { Step } from '../types/Step';
import { useInstructionStorage } from '../hooks/useInstructionStorage';
import { useTheme, Theme } from '../hooks/useTheme';
import { useSteps } from '../hooks/useSteps';
import { useStepGroups } from '../hooks/useStepGroups';
import { useAutosave } from '../hooks/useAutosave';
import { exportToHTML, exportToMarkdown, exportToJSON, downloadFile, generateFileName } from '../utils/exportUtils';
import { toast } from 'sonner';

const Index = () => {
  const [instructionTitle, setInstructionTitle] = useState('–ù–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è');
  const [instructionDescription, setInstructionDescription] = useState('');
  const [showSettings, setShowSettings] = useState(false);
  const [showSavedProjects, setShowSavedProjects] = useState(false);
  const [showPreview, setShowPreview] = useState(false);
  const [showImageEditor, setShowImageEditor] = useState(false);
  const [showHtmlTemplateSelector, setShowHtmlTemplateSelector] = useState(false);
  const [showSaveOptions, setShowSaveOptions] = useState(false);
  const [editingImageStepId, setEditingImageStepId] = useState<string | null>(null);
  const [previewData, setPreviewData] = useState<{title: string, description: string, steps: Step[]} | null>(null);
  const [selectedGroupForTemplate, setSelectedGroupForTemplate] = useState<string | null>(null);
  const [selectedGroupForImage, setSelectedGroupForImage] = useState<string | null>(null);
  const [selectedGroupForFile, setSelectedGroupForFile] = useState<string | null>(null);
  const [showFileEditor, setShowFileEditor] = useState(false);
  const [previewTheme, setPreviewTheme] = useState<Theme>('dark');
  
  const { saveInstruction } = useInstructionStorage();
  const { theme } = useTheme();
  const { steps, addStep, updateStep, deleteStep, copyStep, reorderSteps, setSteps } = useSteps();
  const { 
    groups, 
    ungroupedSteps, 
    createGroup, 
    updateGroup, 
    deleteGroup, 
    addStepToGroup,
    updateStepInGroup,
    getAllSteps,
    setUngroupedSteps,
    getStepById,
    setGroups
  } = useStepGroups();
  const { loadAutosave, clearAutosave } = useAutosave(instructionTitle, instructionDescription, getAllSteps());

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker –¥–ª—è PWA
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then((registration) => {
            console.log('SW registered: ', registration);
          })
          .catch((registrationError) => {
            console.log('SW registration failed: ', registrationError);
          });
      });
    }
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    const autosaved = loadAutosave();
    if (autosaved && autosaved.steps.length > 0) {
      const shouldRestore = window.confirm('–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?');
      if (shouldRestore) {
        setInstructionTitle(autosaved.title);
        setInstructionDescription(autosaved.description);
        setSteps(autosaved.steps);
        // –†–∞–∑–¥–µ–ª—è–µ–º —à–∞–≥–∏ –Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        const groupedSteps = autosaved.steps.filter(step => step.groupId);
        const unGroupedSteps = autosaved.steps.filter(step => !step.groupId);
        setUngroupedSteps(unGroupedSteps);
        toast.success('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      }
    }
  }, []);

  const handleAddStep = (type: 'text' | 'image' | 'code' | 'html' | 'file', fileData?: { name: string; type: string; data: string }) => {
    let newStep: Step;

    if (type === 'image' && fileData) {
      newStep = {
        id: Date.now().toString(),
        type: 'image',
        content: '',
        imageUrl: fileData.data,
        title: '–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
      };
      setSteps(prev => [...prev, newStep]);
      setUngroupedSteps(prev => [...prev, newStep]);
      toast.success('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
      return;
    }

    if (type === 'image') {
      setEditingImageStepId(null);
      setShowImageEditor(true);
      return;
    }

    if (type === 'html') {
      newStep = {
        id: Date.now().toString(),
        type: 'html',
        content: '<p>–í–≤–µ–¥–∏—Ç–µ HTML –∫–æ–¥ –∑–¥–µ—Å—å</p>',
        title: 'HTML –±–ª–æ–∫'
      };
      setSteps(prev => [...prev, newStep]);
      setUngroupedSteps(prev => [...prev, newStep]);
      toast.success('HTML-–±–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω');
      return;
    }

    const createdStep = addStep(type, fileData);
    setUngroupedSteps(prev => [...prev, createdStep]);
    
    const typeNames: Record<string, string> = {
      text: '–¢–µ–∫—Å—Ç',
      code: '–ö–æ–¥',
      file: '–§–∞–π–ª'
    };
    toast.success(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —à–∞–≥: ${typeNames[type] || type}`);
  };

  const handleAddStepToGroup = (groupId: string, type: 'text' | 'image' | 'code' | 'html' | 'file') => {
    if (type === 'html') {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä HTML —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π groupId
      setSelectedGroupForTemplate(groupId);
      setShowHtmlTemplateSelector(true);
      return;
    }

    if (type === 'image') {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–µ—Ä–µ–¥–∞—á–µ–π groupId
      setSelectedGroupForImage(groupId);
      setShowImageEditor(true);
      return;
    }

    if (type === 'file') {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π groupId
      setSelectedGroupForFile(groupId);
      setShowFileEditor(true);
      return;
    }

    let newStep: Step;

    switch (type) {
      case 'text':
        newStep = {
          id: Date.now().toString(),
          type: 'text',
          content: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å',
          title: '–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç',
          groupId
        };
        break;
      case 'code':
        newStep = {
          id: Date.now().toString(),
          type: 'code',
          content: '// –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–¥–µ—Å—å',
          title: '–ù–æ–≤—ã–π –∫–æ–¥',
          language: 'javascript',
          groupId
        };
        break;
      default:
        return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –≤ –≥—Ä—É–ø–ø—É
    const group = groups.find(g => g.id === groupId);
    if (group) {
      updateGroup(groupId, { steps: [...group.steps, newStep] });
      setSteps(prev => [...prev, newStep]);
      toast.success(`–®–∞–≥ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É`);
    }
  };

  const handleUpdateStep = (updatedStep: Step) => {
    updateStep(updatedStep);
    updateStepInGroup(updatedStep);
  };

  const handleEditImage = (stepId: string) => {
    setEditingImageStepId(stepId);
    setShowImageEditor(true);
  };

  const handleImageSave = (imageUrl: string, stepId?: string) => {
    if (stepId) {
      const step = getStepById(stepId);
      if (step) {
        const updatedStep = { ...step, imageUrl };
        handleUpdateStep(updatedStep);
        toast.success('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
      }
    } else {
      const newStep: Step = {
        id: Date.now().toString(),
        type: 'image',
        content: '',
        imageUrl,
        title: '–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        groupId: selectedGroupForImage || undefined
      };
      
      if (selectedGroupForImage) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        const group = groups.find(g => g.id === selectedGroupForImage);
        if (group) {
          updateGroup(selectedGroupForImage, { steps: [...group.steps, newStep] });
          setSteps(prev => [...prev, newStep]);
          toast.success('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É');
        }
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏
        setSteps(prev => [...prev, newStep]);
        setUngroupedSteps(prev => [...prev, newStep]);
        toast.success('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
      }
    }
    setShowImageEditor(false);
    setEditingImageStepId(null);
    setSelectedGroupForImage(null);
  };

  const handleFileSave = (fileData: { name: string; type: string; data: string }) => {
    const newStep: Step = {
      id: Date.now().toString(),
      type: 'file',
      content: `<a href="${fileData.data}" download="${fileData.name}">üìé ${fileData.name}</a>`,
      title: fileData.name,
      fileName: fileData.name,
      fileType: fileData.type,
      fileData: fileData.data,
      groupId: selectedGroupForFile || undefined
    };
    
    if (selectedGroupForFile) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
      const group = groups.find(g => g.id === selectedGroupForFile);
      if (group) {
        updateGroup(selectedGroupForFile, { steps: [...group.steps, newStep] });
        setSteps(prev => [...prev, newStep]);
        toast.success('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É');
      }
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏
      setSteps(prev => [...prev, newStep]);
      setUngroupedSteps(prev => [...prev, newStep]);
      toast.success('–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    
    setShowFileEditor(false);
    setSelectedGroupForFile(null);
  };

  const handlePasteImage = async () => {
    try {
      const clipboardItems = await navigator.clipboard.read();
      const imageItems = clipboardItems.filter(item => 
        item.types.some(type => type.startsWith('image/'))
      );
      
      if (imageItems.length === 0) {
        toast.error('–í –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        return;
      }

      const imageItem = imageItems[0];
      const imageType = imageItem.types.find(type => type.startsWith('image/'));
      
      if (imageType) {
        const blob = await imageItem.getType(imageType);
        const imageUrl = URL.createObjectURL(blob);
        
        const newStep: Step = {
          id: Date.now().toString(),
          type: 'image',
          content: '',
          imageUrl,
          title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞'
        };
        
        setSteps(prev => [...prev, newStep]);
        setUngroupedSteps(prev => [...prev, newStep]);
        toast.success('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
      }
    } catch (error) {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
    }
  };

  const handleSave = () => {
    const allSteps = getAllSteps();
    if (allSteps.length === 0) {
      toast.error('–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —à–∞–≥');
      return;
    }
    
    const success = saveInstruction(instructionTitle, instructionDescription, allSteps, groups);
    if (success) {
      clearAutosave();
      toast.success('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
    } else {
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
  };

  const handleNewProject = () => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const allSteps = getAllSteps();
    if (allSteps.length > 0) {
      saveInstruction(instructionTitle, instructionDescription, allSteps, groups);
      toast.success('–¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
    }
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    setInstructionTitle('–ù–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è');
    setInstructionDescription('');
    setSteps([]);
    setGroups([]);
    setUngroupedSteps([]);
    clearAutosave();
    
    toast.success('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç');
  };

  const handleExportWithOptions = (options: {
    format: 'html' | 'markdown' | 'json';
    password?: string;
    theme: 'light' | 'gray' | 'dark';
  }) => {
    const allSteps = getAllSteps();
    if (allSteps.length === 0) {
      toast.error('–ù–µ—Ç —à–∞–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    
    try {
      let content: string;
      let mimeType: string;
      let filename: string;
      
      switch (options.format) {
        case 'html':
          content = exportToHTML(instructionTitle, instructionDescription, allSteps, groups, options.password, options.theme);
          mimeType = 'text/html';
          filename = generateFileName(instructionTitle, options.theme, allSteps.length, 'html');
          break;
        
        case 'markdown':
          content = exportToMarkdown(instructionTitle, instructionDescription, allSteps);
          mimeType = 'text/markdown';
          filename = generateFileName(instructionTitle, options.theme, allSteps.length, 'markdown');
          break;
        
        case 'json':
          content = exportToJSON(instructionTitle, instructionDescription, allSteps, groups);
          mimeType = 'application/json';
          filename = generateFileName(instructionTitle, options.theme, allSteps.length, 'json');
          break;
          
        default:
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç');
      }
      
      downloadFile(content, filename, mimeType);
      
      toast.success(`–≠–∫—Å–ø–æ—Ä—Ç –≤ ${options.format.toUpperCase()} –∑–∞–≤–µ—Ä—à–µ–Ω${options.password ? ' —Å –∑–∞—â–∏—Ç–æ–π –ø–∞—Ä–æ–ª–µ–º' : ''}`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ');
    }
  };

  const handleImportJSON = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const jsonData = JSON.parse(e.target?.result as string);
        
        if (jsonData.title && jsonData.steps) {
          setInstructionTitle(jsonData.title);
          setInstructionDescription(jsonData.description || '');
          setSteps(jsonData.steps);
          
          // –†–∞–∑–¥–µ–ª—è–µ–º —à–∞–≥–∏ –Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
          const unGroupedSteps = jsonData.steps.filter((step: Step) => !step.groupId);
          setUngroupedSteps(unGroupedSteps);
          
          clearAutosave();
          toast.success('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
        } else {
          toast.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
        }
      } catch (error) {
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞');
      }
    };
    reader.readAsText(file);
  };

  const handleLoadProject = (title: string, description: string, projectSteps: Step[], projectGroups: StepGroup[] = []) => {
    setInstructionTitle(title);
    setInstructionDescription(description);
    setSteps(projectSteps);
    setGroups(projectGroups);
    // –†–∞–∑–¥–µ–ª—è–µ–º —à–∞–≥–∏ –Ω–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –Ω–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    const unGroupedSteps = projectSteps.filter(step => !step.groupId);
    setUngroupedSteps(unGroupedSteps);
    clearAutosave();
    toast.success('–ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
  };

  const handlePreviewProject = (title: string, description: string, projectSteps: Step[], projectGroups: StepGroup[] = []) => {
    setPreviewData({ title, description, steps: projectSteps });
    setShowPreview(true);
    setShowSavedProjects(false);
  };

  const handlePreviewCurrent = () => {
    const allSteps = getAllSteps();
    if (allSteps.length === 0) {
      toast.error('–ù–µ—Ç —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞');
      return;
    }
    setPreviewData({ title: instructionTitle, description: instructionDescription, steps: allSteps });
    setShowPreview(true);
  };

  const handleSelectHtmlTemplate = (htmlContent: string, title: string) => {
    const newStep: Step = {
      id: Date.now().toString(),
      type: 'html',
      content: htmlContent,
      title: title,
      groupId: selectedGroupForTemplate || undefined
    };
    
    if (selectedGroupForTemplate) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
      const group = groups.find(g => g.id === selectedGroupForTemplate);
      if (group) {
        updateGroup(selectedGroupForTemplate, { steps: [...group.steps, newStep] });
        setSteps(prev => [...prev, newStep]);
        toast.success(`HTML-–±–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É: ${title}`);
      }
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —à–∞–≥–∏
      setSteps(prev => [...prev, newStep]);
      setUngroupedSteps(prev => [...prev, newStep]);
      toast.success(`–î–æ–±–∞–≤–ª–µ–Ω HTML-–±–ª–æ–∫: ${title}`);
    }
    
    setShowHtmlTemplateSelector(false);
    setSelectedGroupForTemplate(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const handlePreviewExport = (options: {
    format: 'html' | 'markdown' | 'json';
    password?: string;
    theme: 'light' | 'gray' | 'dark';
  }) => {
    setPreviewTheme(options.theme);
    setShowSaveOptions(true);
    setShowPreview(false);
  };

  const hasUnsavedChanges = getAllSteps().length > 0 || instructionTitle !== '–ù–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' || instructionDescription !== '';

  return (
    <div className={`min-h-screen flex ${theme}`} style={{
      background: 'var(--bg-primary)',
      color: 'var(--text-primary)'
    }}>
      {showSettings && (
        <Settings onClose={() => setShowSettings(false)} />
      )}
      
      {showSavedProjects && (
        <SavedProjects
          onClose={() => setShowSavedProjects(false)}
          onLoadProject={handleLoadProject}
          onPreviewProject={handlePreviewProject}
        />
      )}
      
      {showPreview && previewData && (
        <PreviewMode
          title={previewData.title}
          description={previewData.description}
          steps={previewData.steps}
          groups={groups}
          onClose={() => setShowPreview(false)}
          onExport={handlePreviewExport}
        />
      )}

      {showImageEditor && (
        <ImageEditor
          onSave={handleImageSave}
          onCancel={() => {
            setShowImageEditor(false);
            setEditingImageStepId(null);
            setSelectedGroupForImage(null);
          }}
          stepId={editingImageStepId}
          initialImageUrl={editingImageStepId ? getStepById(editingImageStepId)?.imageUrl : undefined}
        />
      )}

      {showHtmlTemplateSelector && (
        <HtmlTemplateSelector
          onSelectTemplate={handleSelectHtmlTemplate}
          onCancel={() => {
            setShowHtmlTemplateSelector(false);
            setSelectedGroupForTemplate(null);
          }}
        />
      )}

      {showFileEditor && (
        <FileEditor
          step={{
            id: '',
            type: 'file',
            content: '',
            title: '–ù–æ–≤—ã–π —Ñ–∞–π–ª'
          }}
          onSave={(step) => {
            if (step.fileData && step.fileName && step.fileType) {
              handleFileSave({
                name: step.fileName,
                type: step.fileType,
                data: step.fileData
              });
            }
          }}
          onCancel={() => {
            setShowFileEditor(false);
            setSelectedGroupForFile(null);
          }}
        />
      )}


      {showSaveOptions && (
        <SaveOptionsDialog
          isOpen={showSaveOptions}
          onClose={() => setShowSaveOptions(false)}
          onSave={(options) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const finalOptions = {
              ...options,
              theme: options.theme || theme // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            };
            handleExportWithOptions(finalOptions);
          }}
          currentTheme={theme} // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
        />
      )}
      
      <Sidebar
        onAddStep={handleAddStep}
        onAddHtmlWithTemplate={() => {
          setSelectedGroupForTemplate(null);
          setShowHtmlTemplateSelector(true);
        }}
        onLoadImage={() => {
          setSelectedGroupForImage(null);
          setShowImageEditor(true);
        }}
        onPasteImage={handlePasteImage}
        onSave={handleSave}
        onExport={() => setShowSaveOptions(true)}
        onImportJSON={handleImportJSON}
        onOpenSettings={() => setShowSettings(true)}
        onOpenSavedProjects={() => setShowSavedProjects(true)}
        onNewProject={handleNewProject}
        hasUnsavedChanges={hasUnsavedChanges}
      />
      
      <MainArea
        steps={getAllSteps()}
        groups={groups}
        ungroupedSteps={ungroupedSteps}
        onStepsChange={(newSteps) => {
          setSteps(newSteps);
          setUngroupedSteps(newSteps.filter(step => !step.groupId));
        }}
        onCreateGroup={createGroup}
        onUpdateGroup={updateGroup}
        onDeleteGroup={deleteGroup}
        instructionTitle={instructionTitle}
        onTitleChange={setInstructionTitle}
        instructionDescription={instructionDescription}
        onDescriptionChange={setInstructionDescription}
        onPreview={handlePreviewCurrent}
        onEditImage={handleEditImage}
        onUpdateStep={handleUpdateStep}
        onDeleteStep={deleteStep}
        onCopyStep={copyStep}
        onAddStepToGroup={handleAddStepToGroup}
        onAddHtmlWithTemplate={(groupId) => {
          setSelectedGroupForTemplate(groupId || null);
          setShowHtmlTemplateSelector(true);
        }}
        onLoadImage={(groupId) => {
          setSelectedGroupForImage(groupId || null);
          setShowImageEditor(true);
        }}
        onAddFileToGroup={(groupId) => {
          setSelectedGroupForFile(groupId);
          setShowFileEditor(true);
        }}
      />
    </div>
  );
};

export default Index;
